// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"net"
	"net/http"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/ast"
	"github.com/ysugimoto/falco/interpreter/context"
	flchttp "github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of header.set
// Arguments may be:
// - ID, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-set/
func Test_Header_set(t *testing.T) {

	t.Run("Invalid arguments", func(t *testing.T) {
		tests := []struct {
			name value.Value
		}{
			{name: &value.String{Value: ""}},
			{name: &value.String{Value: "Invalid%Header$<>"}},
		}
		for i, tt := range tests {
			req, _ := flchttp.NewRequest(http.MethodGet, "http://localhost:3124", nil)
			ctx := &context.Context{Request: req}

			_, err := Header_set(ctx, &value.Ident{Value: "req"}, tt.name, &value.String{Value: "value"})
			if err != nil {
				t.Errorf("[%d] Unexpected error return: %s", i, err)
			}

			v, err := Header_get(ctx, &value.Ident{Value: "req"}, tt.name)
			if err != nil {
				t.Errorf("[%d] Unexpected error return: %s", i, err)
			}

			if diff := cmp.Diff(v, &value.LenientString{IsNotSet: true}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("set for req", func(t *testing.T) {
		now := time.Now()
		tests := []struct {
			name    string
			value   value.Value
			expect  string
			isError bool
		}{
			{name: "X-Custom-Header", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Not-Found", value: &value.String{Value: "value"}, expect: "value"},
			{name: "Object:foo", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Int", value: &value.Integer{Value: 10}, expect: "10"},
			{name: "X-Int", value: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: "X-Float", value: &value.Float{Value: 10}, expect: "10.000"},
			{name: "X-Float", value: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: "X-Bool", value: &value.Boolean{Value: false}, expect: "0"},
			{name: "X-Bool", value: &value.Boolean{Value: true, Literal: true}, expect: "1"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second}, expect: "1.000"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: "X-Time", value: &value.Time{Value: now}, expect: now.Format(http.TimeFormat)},
			{name: "X-IP", value: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: "192.168.0.1"},
			{name: "X-Backend", value: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: "example"},
			{name: "X-Backend", value: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: "X-Acl", value: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			req, _ := flchttp.NewRequest(http.MethodGet, "http://localhost:3124", nil)
			ctx := &context.Context{Request: req}

			_, err := Header_set(
				ctx,
				&value.Ident{Value: "req"},
				&value.String{Value: tt.name},
				tt.value,
			)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			v, err := Header_get(ctx, &value.Ident{Value: "req"}, &value.String{Value: tt.name})
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			str := value.GetString(v).String()
			if diff := cmp.Diff(tt.expect, str); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
	t.Run("set for bereq", func(t *testing.T) {
		now := time.Now()
		tests := []struct {
			name    string
			value   value.Value
			expect  string
			isError bool
		}{
			{name: "X-Custom-Header", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Not-Found", value: &value.String{Value: "value"}, expect: "value"},
			{name: "Object:foo", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Int", value: &value.Integer{Value: 10}, expect: "10"},
			{name: "X-Int", value: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: "X-Float", value: &value.Float{Value: 10}, expect: "10.000"},
			{name: "X-Float", value: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: "X-Bool", value: &value.Boolean{Value: false}, expect: "0"},
			{name: "X-Bool", value: &value.Boolean{Value: true, Literal: true}, expect: "1"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second}, expect: "1.000"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: "X-Time", value: &value.Time{Value: now}, expect: now.Format(http.TimeFormat)},
			{name: "X-IP", value: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: "192.168.0.1"},
			{name: "X-Backend", value: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: "example"},
			{name: "X-Backend", value: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: "X-Acl", value: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			req, _ := flchttp.NewRequest(http.MethodGet, "http://localhost:3124", nil)
			ctx := &context.Context{BackendRequest: req}

			_, err := Header_set(
				ctx,
				&value.Ident{Value: "bereq"},
				&value.String{Value: tt.name},
				tt.value,
			)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			v, err := Header_get(ctx, &value.Ident{Value: "bereq"}, &value.String{Value: tt.name})
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			str := value.GetString(v).String()
			if diff := cmp.Diff(tt.expect, str); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
	t.Run("set for beresp", func(t *testing.T) {
		now := time.Now()
		tests := []struct {
			name    string
			value   value.Value
			expect  string
			isError bool
		}{
			{name: "X-Custom-Header", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Not-Found", value: &value.String{Value: "value"}, expect: "value"},
			{name: "Object:foo", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Int", value: &value.Integer{Value: 10}, expect: "10"},
			{name: "X-Int", value: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: "X-Float", value: &value.Float{Value: 10}, expect: "10.000"},
			{name: "X-Float", value: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: "X-Bool", value: &value.Boolean{Value: false}, expect: "0"},
			{name: "X-Bool", value: &value.Boolean{Value: true, Literal: true}, expect: "1"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second}, expect: "1.000"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: "X-Time", value: &value.Time{Value: now}, expect: now.Format(http.TimeFormat)},
			{name: "X-IP", value: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: "192.168.0.1"},
			{name: "X-Backend", value: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: "example"},
			{name: "X-Backend", value: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: "X-Acl", value: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &flchttp.Response{Header: flchttp.Header{}}
			ctx := &context.Context{BackendResponse: resp}

			_, err := Header_set(
				ctx,
				&value.Ident{Value: "beresp"},
				&value.String{Value: tt.name},
				tt.value,
			)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			v, err := Header_get(ctx, &value.Ident{Value: "beresp"}, &value.String{Value: tt.name})
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			str := value.GetString(v).String()
			if diff := cmp.Diff(tt.expect, str); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
	t.Run("set for obj", func(t *testing.T) {
		now := time.Now()
		tests := []struct {
			name    string
			value   value.Value
			expect  string
			isError bool
		}{
			{name: "X-Custom-Header", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Not-Found", value: &value.String{Value: "value"}, expect: "value"},
			{name: "Object:foo", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Int", value: &value.Integer{Value: 10}, expect: "10"},
			{name: "X-Int", value: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: "X-Float", value: &value.Float{Value: 10}, expect: "10.000"},
			{name: "X-Float", value: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: "X-Bool", value: &value.Boolean{Value: false}, expect: "0"},
			{name: "X-Bool", value: &value.Boolean{Value: true, Literal: true}, expect: "1"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second}, expect: "1.000"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: "X-Time", value: &value.Time{Value: now}, expect: now.Format(http.TimeFormat)},
			{name: "X-IP", value: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: "192.168.0.1"},
			{name: "X-Backend", value: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: "example"},
			{name: "X-Backend", value: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: "X-Acl", value: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &flchttp.Response{Header: flchttp.Header{}}
			ctx := &context.Context{Object: resp}

			_, err := Header_set(
				ctx,
				&value.Ident{Value: "obj"},
				&value.String{Value: tt.name},
				tt.value,
			)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			v, err := Header_get(ctx, &value.Ident{Value: "obj"}, &value.String{Value: tt.name})
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			str := value.GetString(v).String()
			if diff := cmp.Diff(tt.expect, str); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
	t.Run("set for response", func(t *testing.T) {
		now := time.Now()
		tests := []struct {
			name    string
			value   value.Value
			expect  string
			isError bool
		}{
			{name: "X-Custom-Header", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Not-Found", value: &value.String{Value: "value"}, expect: "value"},
			{name: "Object:foo", value: &value.String{Value: "value"}, expect: "value"},
			{name: "X-Int", value: &value.Integer{Value: 10}, expect: "10"},
			{name: "X-Int", value: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: "X-Float", value: &value.Float{Value: 10}, expect: "10.000"},
			{name: "X-Float", value: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: "X-Bool", value: &value.Boolean{Value: false}, expect: "0"},
			{name: "X-Bool", value: &value.Boolean{Value: true, Literal: true}, expect: "1"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second}, expect: "1.000"},
			{name: "X-RTime", value: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: "X-Time", value: &value.Time{Value: now}, expect: now.Format(http.TimeFormat)},
			{name: "X-IP", value: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: "192.168.0.1"},
			{name: "X-Backend", value: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: "example"},
			{name: "X-Backend", value: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: "X-Acl", value: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &flchttp.Response{Header: flchttp.Header{}}
			ctx := &context.Context{Response: resp}

			_, err := Header_set(
				ctx,
				&value.Ident{Value: "resp"},
				&value.String{Value: tt.name}, tt.value,
			)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			v, err := Header_get(ctx, &value.Ident{Value: "resp"}, &value.String{Value: tt.name})
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_set should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_set should not return error but non-nil: %s", i, err)
					continue
				}
			}

			str := value.GetString(v).String()
			if diff := cmp.Diff(tt.expect, str); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
}
