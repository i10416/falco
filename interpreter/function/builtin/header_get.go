// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"net/http"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Header_get_Name = "header.get"

var Header_get_ArgumentTypes = []value.Type{value.IdentType, value.StringType}

func Header_get_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Header_get_Name, 2, args)
	}

	for i := range Header_filter_ArgumentTypes {
		if args[i].Type() != Header_get_ArgumentTypes[i] {
			return errors.TypeMismatch(Header_get_Name, i+1, Header_get_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

func header_get(h http.Header, name string) string {
	if !strings.Contains(name, ":") {
		return h.Get(name)
	}
	spl := strings.SplitN(name, ":", 2)
	for _, v := range h.Values(spl[0]) {
		kv := strings.SplitN(v, "=", 2)
		if kv[0] == spl[1] {
			return kv[1]
		}
	}
	return ""
}

// Fastly built-in function implementation of header.get
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-get/
func Header_get(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Header_get_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])
	name := value.GetString(args[1]).String()
	if !shared.IsValidHeader(name) {
		return &value.String{IsNotSet: true}, nil
	}

	switch where.Value {
	case "req":
		if ctx.Request != nil {
			return ctx.Request.Header.Get(name), nil
		}
	case "resp":
		if ctx.Response != nil {
			return ctx.Response.Header.Get(name), nil
		}
	case "obj":
		if ctx.Object != nil {
			return ctx.Object.Header.Get(name), nil
		}
	case "bereq":
		if ctx.BackendRequest != nil {
			return ctx.BackendRequest.Header.Get(name), nil
		}
	case "beresp":
		if ctx.BackendResponse != nil {
			return ctx.BackendResponse.Header.Get(name), nil
		}
	default:
		return value.Null, errors.New(Header_get_Name, "ID of first argument %s is invalid", where.Value)
	}
	return &value.String{IsNotSet: true}, nil
}
