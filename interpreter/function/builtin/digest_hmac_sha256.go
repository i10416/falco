// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Digest_hmac_sha256_Name = "digest.hmac_sha256"

var Digest_hmac_sha256_ArgumentTypes = []value.Type{value.StringType, value.StringType}

func Digest_hmac_sha256_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Digest_hmac_sha256_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Digest_hmac_sha256_ArgumentTypes[i] {
			return errors.TypeMismatch(Digest_hmac_sha256_Name, i+1, Digest_hmac_sha256_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of digest.hmac_sha256
// Arguments may be:
// - STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/digest-hmac-sha256/
func Digest_hmac_sha256(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Digest_hmac_sha256_Validate(args); err != nil {
		return value.Null, err
	}

	key := value.GetString(args[0]).String()
	input := value.GetString(args[1]).String()
	mac := hmac.New(sha256.New, []byte(key))
	mac.Write([]byte(input))

	return &value.String{
		Value: hex.EncodeToString(mac.Sum(nil)),
	}, nil
}
