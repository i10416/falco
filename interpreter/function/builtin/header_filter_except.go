// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	flchttp "github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/limitations"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Header_filter_except_Name = "header.filter_except"

var Header_filter_except_ArgumentTypes = []value.Type{value.IdentType}

func Header_filter_except_Validate(args []value.Value) error {
	if len(args) < 2 {
		return errors.ArgumentAtLeast(Header_filter_except_Name, 2)
	}
	if args[0].Type() != Header_filter_except_ArgumentTypes[0] {
		return errors.TypeMismatch(Header_filter_except_Name, 1, Header_filter_except_ArgumentTypes[0], args[0].Type())
	}
	for i := 1; i < len(args); i++ {
		if args[i].Type() != value.StringType {
			return errors.TypeMismatch(Header_filter_except_Name, i+1, value.StringType, args[i].Type())
		}
	}
	return nil
}

func header_filter_except_delete(h flchttp.Header, filters map[string]struct{}) flchttp.Header {
	for key, _ := range h {
		if err := limitations.CheckProtectedHeader(key); err != nil {
			continue
		}

		if _, ok := filters[key]; ok {
			continue
		}
		h.Del(key)
	}

	return h
}

// Fastly built-in function implementation of header.filter_except
// Arguments may be:
// - ID, STRING_LIST
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-filter-except/
func Header_filter_except(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Header_filter_except_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])
	filters := make(map[string]struct{})
	for i := 1; i < len(args); i++ {
		name := value.GetString(args[i]).String()
		if !shared.IsValidHeader(name) {
			return value.Null, errors.New(
				Header_filter_except_Name, "Invalid header name %s is not permitted", name,
			)
		}
		filters[name] = struct{}{}
	}

	switch where.Value {
	case "req":
		if ctx.Request != nil {
			ctx.Request.Header = header_filter_except_delete(ctx.Request.Header, filters)
		}
	case "resp":
		if ctx.Response != nil {
			ctx.Response.Header = header_filter_except_delete(ctx.Response.Header, filters)
		}
	case "obj":
		if ctx.Object != nil {
			ctx.Object.Header = header_filter_except_delete(ctx.Object.Header, filters)
		}
	case "bereq":
		if ctx.BackendRequest != nil {
			ctx.BackendRequest.Header = header_filter_except_delete(ctx.BackendRequest.Header, filters)
		}
	case "beresp":
		if ctx.BackendResponse != nil {
			ctx.BackendResponse.Header = header_filter_except_delete(ctx.BackendResponse.Header, filters)
		}
	default:
		return value.Null, errors.New(Header_get_Name, "ID of first argument %s is invalid", where.Value)
	}
	return &value.String{IsNotSet: true}, nil
}
