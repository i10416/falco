// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	flchttp "github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Header_get_Name = "header.get"

var Header_get_ArgumentTypes = []value.Type{value.IdentType, value.StringType}

func Header_get_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Header_get_Name, 2, args)
	}

	for i := 0; i < 1; i++ {
		if args[i].Type() != Header_get_ArgumentTypes[i] {
			return errors.TypeMismatch(Header_get_Name, i+1, Header_get_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of header.get
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-get/
func Header_get(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Header_get_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])
	// Type assertion for second argument
	switch t := args[1].(type) {
	case *value.Integer:
		if t.Literal {
			return value.Null, errors.New(Header_get_Name, "Integer literal could not provide on second argument")
		}
	case *value.Float:
		if t.Literal {
			return value.Null, errors.New(Header_get_Name, "Float literal could not provide on second argument")
		}
	case *value.RTime:
		if t.Literal {
			return value.Null, errors.New(Header_get_Name, "RTime literal could not provide on second argument")
		}
	case *value.Backend:
		if t.Literal {
			return value.Null, errors.New(Header_get_Name, "Backend literal could not provide on second argument")
		}
	case *value.Acl:
		return value.Null, errors.New(Header_get_Name, "Acl could not provide on second argument")
	}

	name := value.GetString(args[1]).String()
	var header flchttp.Header

	switch where.Value {
	case "req":
		if ctx.Request != nil {
			header = ctx.Request.Header
		}
	case "resp":
		if ctx.Response != nil {
			header = ctx.Response.Header
		}
	case "obj":
		if ctx.Object != nil {
			header = ctx.Object.Header
		}
	case "bereq":
		if ctx.BackendRequest != nil {
			header = ctx.BackendRequest.Header
		}
	case "beresp":
		if ctx.BackendResponse != nil {
			header = ctx.BackendResponse.Header
		}
	default:
		return value.Null, errors.New(Header_get_Name, "ID of first argument %s is invalid", where.Value)
	}

	if header == nil || !shared.IsValidHeader(name) {
		return &value.LenientString{IsNotSet: true}, nil
	}

	return header.Get(name), nil
}
